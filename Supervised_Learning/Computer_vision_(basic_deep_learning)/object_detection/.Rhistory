if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
cat_melon<-load.image("cat_melon.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
g <- matrix(cat_melon_array[2,,,1]*255,ncol=64)
b <- matrix(cat_melon_array[3,,,1]*255,ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_test<-predict(my_model,my_data_test)
ypred_test
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("biglm")){install.packages("biglm",verbose = F) ; library("biglm")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image2.Rdata")
cat_melon<-load.image("pluto1.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
g <- matrix(cat_melon_array[2,,,1]*255,ncol=64)
b <- matrix(cat_melon_array[3,,,1]*255,ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_test<-predict(my_model,my_data_test)
ypred_test
cat_melon<-load.image("pluto3.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
cat_melon<-load.image("pluto3.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
g <- matrix(cat_melon_array[2,,,1]*255,ncol=64)
b <- matrix(cat_melon_array[3,,,1]*255,ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_test<-predict(my_model,my_data_test)
ypred_test
1+1
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
my_data_train[,1:3]
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image2.Rdata")
mlp_grid <- expand.grid(layer1 = 10,
layer2 = 10,
layer3 = 10)
mlp_fit <- caret::train(x = my_data_train[,1:ncol(my_data_train)],
y = factor(my_data_train$Y),
method = "mlpML",
trControl = trainControl(method = "cv", verboseIter = TRUE, returnData = FALSE),
tuneGrid = mlp_grid)
save(mlp_fit,"my_mlp_3_layers.Rdata")
save(mlp_fit,file="my_mlp_3_layers.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image2.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_mlp_3_layers.Rdata")
my_data_test
nrow(my_data_test)
my_data_test<-data.frame(matrix(ncol=64*64*3))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
# my_data_test[i,]<-c(as.vector(r))
}
my_data_test<-cbind(Y=my_data_test_y,my_data_test)
nrow(my_data_test)
ypred_test_nn<-predict(my_model,my_data_test)
ypred_test_nn
table(my_data_test$Y,ypred_test_nn)
my_model
ypred_test
ypred_test_nn
ypred_test
y_pred
ypred
ypred_test_nn<-predict(mlp_fit,my_data_test)
ypred_test_nn
ypred_test_nn<-predict(mlp_fit,my_data_train)
ypred_test_nn
rm(list=c(my_data_test_x,my_data_test_y,my_data_train_x,my_data_train_y))
rm(my_data_test_x,my_data_test_y,my_data_train_x,my_data_train_y)
rm(list=ls())
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
rm(list=ls())
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
a
library(rhdf5)
h5ls("./data_in/train_catvnoncat.h5")
my_data_train_x <- h5read("./data_in/train_catvnoncat.h5","train_set_x")
my_data_train_y <- h5read("./data_in/train_catvnoncat.h5","train_set_y")
h5ls("./data_in/test_catvnoncat.h5")
my_data_test_x <- h5read("./data_in/test_catvnoncat.h5","test_set_x")
my_data_test_y <- h5read("./data_in/test_catvnoncat.h5","test_set_y")
n<-3
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
n<-3
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
library(grid)
grid.raster(col, interpolate=FALSE)
my_data_train<-data.frame(matrix(ncol=64*64*3))
for(i in 1:209){
print(i)
r <- matrix(my_data_train_x[1,,,i],ncol=64)
g <- matrix(my_data_train_x[2,,,i],ncol=64)
b <- matrix(my_data_train_x[3,,,i],ncol=64)
my_data_train[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_train<-cbind(Y=my_data_train_y,my_data_train)
my_data_test<-data.frame(matrix(ncol=64*64*3))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_test<-cbind(Y=my_data_test_y,my_data_test)
rm(my_data_test_x,my_data_test_y,my_data_train_x,my_data_train_y)
)
print(Sys.time(),"Training...")
my_logistic_model <- train(factor(Y) ~ .,  data=my_data_train, method="LogitBoost")
print(Sys.time(),"Done!")
print(Sys.time(),"Training...")
my_logistic_model <- caret::train(factor(Y) ~ .,  data=my_data_train, method="LogitBoost")
print(Sys.time(),"Done!")
print(Sys.time(),"Predict...")
yhat_train_logistic<-predict(my_logistic_model,my_data_train)
print(Sys.time(),"Done!")
print(Sys.time(),"Predict...")
yhat_test_logistic<-predict(my_logistic_model,my_data_test)
print(Sys.time(),"Done!")
print(paste(Sys.time(),"Predict..."))
save.image("my_image.Rdata")
base::save.image("my_image.Rdata")
print(paste(Sys.time(),"Done!"))
conf_matrix_train<-table(yhat_train_logistic,my_data_train$Y)
conf_matrix_train
conf_matrix_test<-table(yhat_test_logistic,my_data_test$Y)
conf_matrix_test
idx_good_test_0<-which(yhat_test_logistic==0 & my_data_test$Y==0)
idx_fn<-which(yhat_test_logistic==0 & my_data_test$Y==1)
idx_fn
n<-4
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
rm(list=ls())
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image.Rdata")
my_data_train_x <- h5read("./data_in/train_catvnoncat.h5","train_set_x")
my_data_train_y <- h5read("./data_in/train_catvnoncat.h5","train_set_y")
my_data_test_x <- h5read("./data_in/test_catvnoncat.h5","test_set_x")
my_data_test_y <- h5read("./data_in/test_catvnoncat.h5","test_set_y")
base::save.image("my_image.Rdata")
1+1
conf_matrix_train<-table(yhat_train_logistic,my_data_train$Y)
conf_matrix_train
conf_matrix_test<-table(yhat_test_logistic,my_data_test$Y)
conf_matrix_test
idx_tp<-which(yhat_test_logistic==1 & my_data_test$Y==1)
idx_tn<-which(yhat_test_logistic==0 & my_data_test$Y==0)
idx_fp<-which(yhat_test_logistic==1 & my_data_test$Y==0)
idx_fn<-which(yhat_test_logistic==0 & my_data_test$Y==1)
idx_tp
idx_fp
n<-14
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
my_control<-trainControl(method = "cv", verboseIter = TRUE, returnData = FALSE)
my_control<-trainControl(method = "cv", verboseIter = TRUE, returnData = FALSE)
my_mlp_model <- caret::train(factor(Y) ~ .,
data=my_data_train,
trControl = my_control,
method="mlp")
yhat_test_mlp<-predict(my_mlp_model,my_data_test)
table(my_data_test$Y,yhat_test_mlp)
save(my_mlp_model,"simple_mlp.Rdata")
save(my_mlp_model,file="simple_mlp.Rdata")
save(my_data_test,file="my_data_test.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_data_test.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/simple_mlp.Rdata")
yhat_test_mlp<-predict(my_mlp_model,my_data_test)
yhat_test_mlp
rm(list=ls())
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
setwd("C:/Users/Aturt/Desktop/Supervised_Learning/Computer_vision_(basic_deep_learning)/")
setwd("C:/Users/Aturt/Desktop/Supervised_Learning/Computer_vision_(basic_deep_learning)/object_detection/")
h5ls("data_in/train_catvnoncat.h5")
my_data_train_x <- h5read("data_in/train_catvnoncat.h5", "train_set_x")
my_data_train_y <- h5read("data_in/train_catvnoncat.h5", "train_set_y")
h5ls("./data_in/test_catvnoncat.h5")
my_data_test_y <- h5read("data_in/test_catvnoncat.h5", "test_set_y")
my_data_test_x <- h5read("data_in/test_catvnoncat.h5", "test_set_x")
head(my_data_train_x)
dim(my_data_train_x)
dim(my_data_train_y)
?grid.raster
n<-3
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
?rgb
col <- rgb(r, g, b)
#dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
col <- rgb(r, g, b)
dim(col) <- dim(r)
grid.raster(col, interpolate=FALSE)
col <- rgb(r, g, b)
col<-t(col)
grid.raster(col, interpolate=FALSE)
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-25
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-34
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-76
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-42
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
data.frame(matrix(3*3*4))
my_data_train<-data.frame(matrix(ncol=64*64*3))
data.frame(matrix(ncol=3*3*4))
for(i in 1:209){
print(i)
r <- matrix(my_data_train_x[1,,,i],ncol=64)
g <- matrix(my_data_train_x[2,,,i],ncol=64)
b <- matrix(my_data_train_x[3,,,i],ncol=64)
my_data_train[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_train<-cbind(Y=my_data_train_y,my_data_train)
my_data_test<-data.frame(matrix(64*64*3))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
NULL[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_test<-data.frame(matrix(ncol=64*64*3))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_test<-cbind(Y=my_data_test_y,my_data_test)
#Classic logistic regression Newton-Rhapson coefficients
my_model<-glm(factor(Y)~ ., binomial(link = "logit"), data = my_data_train)
print(paste(Sys.time(),"Training..."))
my_logistic_model <- caret::train(factor(Y) ~ .,  data=my_data_train, method="LogitBoost")
print(paste(Sys.time(),"Done!"))
library(dplyr)
install.packages("dplyr")
library(dplyr)
print(paste(Sys.time(),"Training..."))
my_logistic_model <- caret::train(factor(Y) ~ .,  data=my_data_train, method="LogitBoost")
?predict
print(paste(Sys.time(),"Predict..."))
yhat_train_logistic<-predict(my_logistic_model,my_data_train)
print(paste(Sys.time(),"Done!"))
yhat_test_logistic<-predict(my_logistic_model,my_data_test)
conf_matrix_train<-table(yhat_train_logistic,my_data_train$Y)
conf_matrix_train
my_data_train<-data.frame(matrix(ncol=64*64*3))
for(i in 1:209){
print(i)
r <- matrix(my_data_train_x[1,,,i]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,i]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,i]/255,ncol=64)
my_data_train[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_train<-cbind(Y=my_data_train_y,my_data_train)
#Test data
my_data_test<-data.frame(matrix(ncol=64*64*3))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,i]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,i]/255,ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_test<-cbind(Y=my_data_test_y,my_data_test)
#----------------------------------- End --------------------------------------------#
#------------------------- Train Logistic Regression ---------------------------------#
#Classic logistic regression Newton-Rhapson coefficients
my_model<-glm(factor(Y)~ ., binomial(link = "logit"), data = my_data_train)
#Logistic regression with boosting algorithm (run next 3 lines)
print(paste(Sys.time(),"Training..."))
my_logistic_model <- caret::train(factor(Y) ~ .,  data=my_data_train, method="LogitBoost")
print(paste(Sys.time(),"Done!"))
print(paste(Sys.time(),"Predict..."))
yhat_train_logistic<-predict(my_logistic_model,my_data_train)
print(paste(Sys.time(),"Done!"))
print(paste(Sys.time(),"Predict..."))
yhat_test_logistic<-predict(my_logistic_model,my_data_test)
print(paste(Sys.time(),"Done!"))
#----------------------------------- End --------------------------------------------#
#------------------------- How good is your model ---------------------------------#
conf_matrix_train<-table(yhat_train_logistic,my_data_train$Y)
conf_matrix_train
conf_matrix_test<-table(yhat_test_logistic,my_data_test$Y)
conf_matrix_test
my_logistic_model$terms
my_logistic_model$modelInfo
my_logistic_model$finalModel
my_logistic_model$xlevels
coef(my_logistic_model$finalModel)
coef(my_logistic_model$finalModel, my_logistic_model$bestTune$.lambda)
c(head(my_logistic_model$finalModel$lambda, 5), tail(my_logistic_model$finalModel$lambda, 5))
coef(my_logistic_model$finalModel, my_logistic_model$finalModel$lambdaOpt)
my_logistic_model$finalModel$lambdaOpt
my_logistic_model$finalModel
coef(my_logistic_model$finalModel)
idx_tp<-which(yhat_test_logistic==1 & my_data_test$Y==1)
idx_tn<-which(yhat_test_logistic==0 & my_data_test$Y==0)
idx_fp<-which(yhat_test_logistic==1 & my_data_test$Y==0)
idx_fn<-which(yhat_test_logistic==0 & my_data_test$Y==1)
idx_fp
n<-14
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
idx_fn
n<-4
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
my_image<-load.image("cat_melon.jpg")
my_image<-resize(my_image,64,64)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
my_image<-load.image("cat_melon.jpg")
my_image<-resize(my_image,64,64)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_image_array[1,,,1]*255,ncol=64)
g <- matrix(my_image_array[2,,,1]*255,ncol=64)
b <- matrix(my_image_array[3,,,1]*255,ncol=64)
cat_melon[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
image_test_data[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_image_test<-predict(my_logistic_model,image_test_data)
ypred_image_test
ypred_image_test
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
my_image<-load.image("cat_melon.jpg")
my_image<-resize(my_image,64,64)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_image_array[1,,,1]*255,ncol=64)
g <- matrix(my_image_array[2,,,1]*255,ncol=64)
b <- matrix(my_image_array[3,,,1]*255,ncol=64)
image_test_data[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_image_test<-predict(my_logistic_model,image_test_data)
ypred_image_test
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
r <- matrix(my_image_array[1,,,1],ncol=64)
g <- matrix(my_image_array[2,,,1],ncol=64)
b <- matrix(my_image_array[3,,,1],ncol=64)
image_test_data[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_image_test<-predict(my_logistic_model,image_test_data)
ypred_image_test
my_image<-load.image("random_cat.jpg")
my_image<-resize(my_image,64,64)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_image_array[1,,,1],ncol=64)
g <- matrix(my_image_array[2,,,1],ncol=64)
b <- matrix(my_image_array[3,,,1],ncol=64)
image_test_data[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_image_test<-predict(my_logistic_model,image_test_data)
ypred_image_test
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
my_image<-load.image("random_cat.jpg")
my_image<-resize(my_image,64,64)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_image_array[1,,,1],ncol=64)
g <- matrix(my_image_array[2,,,1],ncol=64)
b <- matrix(my_image_array[3,,,1],ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
my_image<-load.image("random_cat.jpg")
my_image<-resize(my_image,64,64)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_image_array[1,,,1],ncol=64)
g <- matrix(my_image_array[2,,,1],ncol=64)
b <- matrix(my_image_array[3,,,1],ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
grid.raster(col, interpolate=FALSE)
col <- rgb(r, g, b)
col<-t(col)
grid.raster(col, interpolate=FALSE)
dim(my_image)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_image_array[,,1,1],ncol=64)
g <- matrix(my_image_array[,,1,2],ncol=64)
b <- matrix(my_image_array[,,1,3],ncol=64)
image_test_data[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_image_test<-predict(my_logistic_model,image_test_data)
ypred_image_test
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
dim(my_image_array)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
