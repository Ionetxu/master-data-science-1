dir.create("C:/Users/Aturt/Desktop/ejs")
view("EU.Stats.transport.txt")
dir1="C:/Users/Aturt/Desktop/Ejercicios"
dir1="C:/Users/Aturt/Desktop//Session3/Ejercicios"
setwd(dir1)
sum_n=function(a_1,a_n){
n=a_n-a_1
return(n*(a_1+a_n)/2)
}
sum_n(56,60)
sum_n(56,62)
sum_n(56,70)
M=sol.quad(1,111,-1376)
sol.quad=function(a,b,c){
sol_1=(-b + sqrt(b^2 - 4*a*c) ) / ( 2*a )
sol_2=(-b - sqrt(b^2 - 4*a*c) ) / ( 2*a )
return(c(sol_1,sol_2))
}
M=sol.quad(1,111,-1376)
M
#Como el enunciado preguntaba por un nÃƒÂºmero natural la soluciÃƒÂ³n tiene que ser:
N=55+M[1]
N
M=sol.quad(1,111,-1476)
M
M[1]
M[2]
#Como el enunciado preguntaba por un nÃƒÂºmero natural la soluciÃƒÂ³n tiene que ser:
N=55+M[1]
N
ls()
getwd()
transport=read.delim(file = paste(dir1,"EU.Stats.transport.txt",sep="/")
,header=T,sep="\t")
# revisamos la estructura de este data.frame para saber que variables contiene y de que tipo
str(transport)
levels(transport$geo)
levels(transport$geo)
length(levels(transport$geo))
#en primer lugar leemos el fichero utilizando la funciÃƒÂ³n read.delim
#y asignamos a la variable transport el data.frame generado
transport=read.delim(file = paste(dir1,"EU.Stats.transport.txt",sep="/"),
header=T,
sep="\t",
stringsAsFactors = F)
# revisamos la estructura de este data.frame para saber que variables contiene
#y de que tipo
str(transport)
transports$vehicle == "TRN" & transports$time == 1990
transport$vehicle == "TRN" & transports$time == 1990
transport$vehicle == "TRN" & transport$time == 1990 & transport$geo == "AT"
which(transport$vehicle == "TRN" & transport$time == 1990 & transport$geo == "AT")
dim(transport)
babies <- read.delim("babies.txt", header=T, header=T, sep="\t", stringsAsFactors = F)
babies <- read.delim("babies.txt", header=T, sep="\t", stringsAsFactors = F)
str(babies)
min(babies$bwt)
### Ejercicio #4: Ordenando vectores numÃƒÂ©ricos. which & which.min
#Accede al dataset "murders" del paquete *dslabs*
library(dslabs)
#cuando accedemos a un dataset contenido en un paquete de R
#los datos se cargan en R en un data.frame de nombre el del dataset
#mediante la funcion data()
data(murders)
str(murders)
which.min(murders$total)
murders[which.min(murders$total),]
murders$rate <- murders$total / murders$population *100000
head(murders)
#definimos un mini data.frame que contenga solo los datos de uso de coche en 1990
#y otro para 2016
car.1990=transport[transport$time==1990 &transport$vehicle=="CAR",]
car.2016=transport[transport$time==2016 &transport$vehicle=="CAR",]
# con la funciÃƒÂ³n %in% comprobamos si todos los paises
# para los que hay dato en 1990 tienen datos en 2016
car.1990$geo %in% car.2016$geo
#ahora tenemos que ordenar los dos data.frames de la misma forma
# buscamos, para los paises ordenados como en car.1990,
# cuales son sus posiciones en car.2016
ix=match(car.1990$geo,car.2016$geo)
ix
car.2016=transport[transport$time==2016 &transport$vehicle=="CAR" & transport$geo %in% car.1990$geo,]
dim(car.2016)
#Ahora ya podemos restar los dos vectores
#porque los paises estan en el mismo orden
diff.rates=car.2016$values[ix]-car.1990$values
#podemos calcular el Ãƒ­ndice del de mayor diferencia
max(diff.rates)
which.max(diff.rates)
#y podemos ver a que pais corresponde
car.1990$geo[which.max(diff.rates)]
which(diff.rates<0)
car.tr <- transport[transport$geo == "TR", transport$vehicle == "CAR"]
car.tr <- transport[transport$geo == "TR", transport$vehicle == "CAR",]
car.tr <- transport[transport$geo == "TR" & transport$vehicle == "CAR",]
car.uk <- transport[transport$geo == "UK" & transport$vehicle == "CAR",]
plot(car.tr$time, car.tr$values)
lines()
lines(car.tr$time, car.tr$values)
lines(car.uk$time, car.uk$values, col="red")
plot(car.tr$time, car.tr$values, ylim=c(0,100))
lines(car.tr$time, car.tr$values)
lines(car.uk$time, car.uk$values, col="red")
eu.car <- transport[transport$vehicle == "CAR",]
aggregate(eu.car$values, by=list(eu.cars$time), mean)
aggregate(eu.car$values, by=list(eu.car$time), mean)
dummy <- aggregate(eu.car$values, by=list(eu.car$time), mean)
lines(dummy, lty=2)
library(dslabs)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
####### scatterplot
data(murders)
plot(murders$total,murders$population/10^5)
#cambio de sÃƒ­mbolos
plot(murders$total,murders$population/10^5,pch="*")
#cambio de color
plot(murders$total,murders$population/10^5,pch="*",col="red")
#si queremos aÃƒÂ±adir un plot a otro
plot(murders$total,murders$population/10^5,pch="*",col="red")
par(new=T)
plot(murders$total,murders$population/10^5,pch="o")
#o usando points/lines
plot(murders$total,murders$population/10^5,pch="*",col="red")
points(murders$total,murders$population/10^5,lty=2)
abline(a=0,b=1,lty=2)
lm(murders$population/10^5~murders$total)
abline(a=9.138, b=0.28, col="red")
### Histograms
hist(murders$total)
#binarizamos para comprobar la interpretaciÃƒÂ³n del plot
murders$total.bin=murders$total
murders$total.bin[which(murders$total<=200)]=200
murders$total.bin[which(murders$total>200 & murders$total<=400)]=400
murders$total.bin[which(murders$total>400 & murders$total<=600)]=600
murders$total.bin[which(murders$total>600 & murders$total<=800)]=800
murders$total.bin[which(murders$total>800 & murders$total<=1000)]=1000
murders$total.bin[which(murders$total>1000 & murders$total<=1200)]=1200
murders$total.bin[which(murders$total>1200 & murders$total<=1400)]=1400
table(murders$total.bin)
### Histograms
hist(murders$total, breaks=c(0,100,200,300,400,500))
### Histograms
hist(murders$total, breaks=c(0,100,200,300,400,500, 1400))
#usando un loop
murders$total.bin=murders$total
for (i in 1:7){
murders$total.bin[which(murders$total>200*(i-1) & murders$total<=200*i)]=200*i
}
table(murders$total.bin)
# visualizar probabilidades en lugar de frecuencias
hist(murders$total,freq = F)
### Boxplot
boxplot(murders$total)
summary(murders$total)
boxplot(murders$total~murders$region)
summary(murders$total~murders$region)
murders.west<-filter(murders,region=="West")
murders.west[which.max(murders.west$total),]
babies=read.delim("babies.txt",header=T,sep="\t",stringsAsFactors = F)
hist(babies$bwt)
mean(babies$bwt)
sqrt(var(babies$bwt))
datos<-read.delim("datos.txt", header=T, sep="\t")
hist(datos$altura)
boxplot(datos$altura)
boxplot(datos$altura~datos$sexo)
summary(datos$altura)
summary(datos$edad)
plot(datos$edad, datos$altura)
IQR(datos$altura)
boxplot(datos$altura~datos$sexo)
par(c(2,2))
IQR(datos$altura)
IQR(datos$altura)
plot(datos$edad, datos$altura)
par(mfrow=c(2,2))
boxplot(datos$altura~datos$sexo)
plot(datos$edad, datos$altura)
boxplot(datos$altura)
hist(datos$altura)
hist(datos$altura)
plot()
plot(1,1)
par()
par(mrows=c(1,1))
par(mfrows=c(1,1))
plot(1,1)
plot(1,1)
plot(1,1)
?par
plot(1,1)
rm(par)
ls
qqplot(murders$total, babies$bwt)
qqplot(murders$total, babies$bwt)
qqnorm(murders$total)
qqnorm(babies$bwt)
