gapminder %>% filter(year == x) %>% ggplot(aes(x=fertility, y=life_expectancy)) +
geom_point(aes(color=continent, size = population))
# Loading data from the WDB web using an API
install.packages('WDI')
library(WDI)
WDIsearch(string = "life.*expectancy", field = "name", cache = NULL)
df.le = WDI(country = "all", indicator = c("SP.DYN.LE00.IN"), start = 1900,
end = 2012)
head(df.le)
levels(factor(df.le$country))
levels(factor(df.le$year))
g = ggplot() + geom_boxplot(data = df.le, aes(x = year, y = SP.DYN.LE00.IN,
group = year))
g
subset(df.le, year > 1988 & SP.DYN.LE00.IN < 40)
g = g + geom_line(data = subset(df.le, country == "Rwanda"), aes(x = year, y = SP.DYN.LE00.IN),
col = "red")
g
g = g + geom_line(data = subset(df.le, country == "Sierra Leone"), aes(x = year, y = SP.DYN.LE00.IN),
col = "orange")
g
g = g + geom_line(data = subset(df.le, country == "Cambodja"), aes(x = year, y = SP.DYN.LE00.IN),
col = "orange")
g
g = g + geom_line(data = subset(df.le, country == "Cambodia"), aes(x = year, y = SP.DYN.LE00.IN),
col = "orange")
g
g = g + geom_line(data = subset(df.le, country == "Cambodia"), aes(x = year, y = SP.DYN.LE00.IN),
col = "blue")
g
install.packages("lattice")
install.packages("beeswarm")
beads <- rep( c("red", "blue"), times = c(2,3))
beads
B<-1000
realizaciones<-replicate(B,sample(beads,1))
realizaciones<-replicate(B,sample(beads,1), replace = T)
realizaciones<-replicate(B,sample(beads,1,replace=T))
table(realizaciones)
prop.table(table(realizaciones))
#Habriamos acertado tanto con solo 10 realizaciones?
B<-10
realizaciones<-replicate(B,sample(beads,1,replace=T))
table(realizaciones)
prop.table(table(realizaciones))
B<-10
B<-10
x10<-numeric()
for (i in 1:100){
realizaciones<-replicate(B,sample(beads,1,replace=T))
x10<-rbind(x10,prop.table(table(realizaciones)))
}
x10<-rbind(x10,prop.table(table(realizaciones)))
B<-10
x10<-numeric()
for (i in 1:100){
realizaciones<-replicate(B,sample(beads,1,replace=T))
x10<-rbind(x10,prop.table(table(realizaciones)))
}
boxplot(data.frame(x10,x100,x1000))
B<-1000
x1000<-numeric()
for (i in 1:1000){
realizaciones<-replicate(B,sample(beads,1))
x1000<-rbind(x1000,prop.table(table(realizaciones)))
}
boxplot(data.frame(x10,x100,x1000))
B<-10
x10<-numeric()
for (i in 1:100){
realizaciones<-replicate(B,sample(beads,1,replace=T))
x10<-rbind(x10,prop.table(table(realizaciones)))
}
#Hacemos lo mismo con muestras de 100 y de 1000 elementos
B<-100
x100<-numeric()
for (i in 1:100){
realizaciones<-replicate(B,sample(beads,1))
x100<-rbind(x100,prop.table(table(realizaciones)))
}
B<-1000
x1000<-numeric()
for (i in 1:1000){
realizaciones<-replicate(B,sample(beads,1))
x1000<-rbind(x1000,prop.table(table(realizaciones)))
}
#Representamos las tres muestras de tamaÃ±os 10,100 y 1000 con un boxplot
boxplot(data.frame(x10,x100,x1000))
pbinom(2,2,0.4)
?binom
?pbinom
r.binom<-rbinom(1000,100,0.5)
#rmultinom(n, size, prob)
r.multi<-rmultinom(1000, 5, rep(0.2,5))
#rhyper(nn, m, n, k)
r.hyper<-rhyper(1000,2,3,2)
#rpois(n, lambda)
r.pois<-rpois(1000,1)
#### PINtar
par(mfrow=c(2,2))
hist(r.binom)
hist(r.multi)
hist(r.hyper)
hist(r.pois)
#######################################################################
#           Ejemplo 3: El cumpleaÃ±os
#######################################################################
set.seed(1)
n <- 15
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
same_birthday <- function(n){
bdays <- sample(1:365, n, replace=TRUE)
any(duplicated(bdays))
}
B <- 10000
results <- replicate(B, same_birthday(15))
mean(results)
results
mean(results)
B <- 10000
results <- replicate(B, same_birthday(50))
mean(results)
compute_prob <- function(n, B=10000){
results <- replicate(B, same_birthday(n))
mean(results)
}
n <- seq(1,60)
prob <- sapply(n, compute_prob)
qplot(n, prob)
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
prize
prize_door
my_pick <- sample(doors, 1)
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
stick <- my_pick
stick == prize_door
prize
my_pick
show
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
stick <- my_pick
stick == prize_door
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
stick <- my_pick
stick == prize_door
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
stick <- my_pick
stick == prize_door
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
stick <- my_pick
stick == prize_door
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
stick <- my_pick
stick == prize_door
})
mean(stick)
switch == prize_door
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
switch <- doors[!doors %in% c(my_pick, show)]
switch == prize_door
})
mean(switch)
switch <- doors[!doors%in%c(my_pick, show)]
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
switch <- doors[!doors%in%c(my_pick, show)]
switch == prize_door
})
mean(switch)
switch
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
switch <- doors[!doors %in% c(my_pick, show)]
switch == prize_door
})
mean(switch)
doors
my_pick
prize_door
doors %in% c(my_pick, prize_door)
B <- 100000
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
stick <- my_pick
stick == prize_door
})
mean(stick)
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
switch <- doors[!doors %in% c(my_pick, show)]
switch == prize_door
})
mean(switch)
!doors %in% c(my_pick, prize_door)
my_pick
show
show <- sample(doors[!doors %in% c(my_pick, prize_door,1)])
show
show <- sample(doors[!doors %in% c(my_pick, prize_door],1)
stick <- my_pick
stick == prize_door
})
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)
switch <- doors[!doors %in% c(my_pick, show)]
switch == prize_door
})
mean(switch)
data(heights)
library(dslabs)
data(heights)
#Usando dplyr producimos una nueva variable que contiene las alturas de los chicos
x <- heights %>% filter(sex=="Male") %>% .$height
library(dplyr)
#Usando dplyr producimos una nueva variable que contiene las alturas de los chicos
x <- heights %>% filter(sex=="Male") %>% .$height
head(x)
# CuÃ¡l es la probabilidad de que uno de los chicos de nuestra muestra
# mida menos de 70 inches?
F(70)
F <- function(a) mean(x<=a)
# CuÃ¡l es la probabilidad de que uno de los chicos de nuestra muestra
# mida menos de 70 inches?
F(70)
hist(x, bins=20)
?hist
hist(x, braks=20)
hist(x, breaks=20)
hist(x, breaks=20)
hist(x, breaks=40)
#install.packages(c("downloader","dplyr","lattice","beeswarm","WDI","ggplot2","ShortRead"))
library(downloader)
library(dplyr)
library(lattice)
library(beeswarm)
library(WDI)
library(ggplot2)
#####################################################################
#                 MICE DATA
#####################################################################
setwd("C:/Users/Aturt/Desktop/Session5_Statistics&R_students/Data/") # change your path
dir=getwd()
library(downloader)
library(dplyr)
pheno=read.csv("mice_pheno.csv")
View(pheno)
which(pheno[,2]=="hf")
length(which(pheno[,2]=="hf"))
length(which(pheno[,2]=="chow"))
hf.data=pheno[which(pheno[,2]=="hf"),]
chow.data=pheno[which(pheno[,2]=="chow"),]
summary(hf.data[,3])
summary(chow.data[,3])
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
stop("vectors must be same length")
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
error.bar
y.means=c(mean(chow.data[,3],na.rm=T),mean(hf.data[,3],na.rm=T))
y.sd=c(sqrt(var(chow.data[,3],na.rm=T)),sqrt(var(hf.data[,3],na.rm=T)))
y.se=y.sd/sqrt(c(length(chow.data[,3]),length(hf.data[,3])))
barx=barplot(y.means)
error.bar(barx,y.means, y.se)
X11()
# BOXPLOT
boxplot(pheno[,"Bodyweight"]~pheno[,"Diet"])
library(lattice)
bwplot(pheno$Bodyweight ~ pheno$Diet|pheno$Sex,
ylab="Bodyweight", xlab="",
main="",
#layout=(c(1,3))
)
bwplot(pheno$Bodyweight ~ pheno$Sex|pheno$Diet,
ylab="Bodyweight", xlab="",
main="",
#layout=(c(1,3))
)
library(beeswarm)
beeswarm(Bodyweight ~ Diet, data = pheno, pch = 16,
pwcol = as.numeric(Sex), xlab = '',
ylab = 'Body Weight',
labels = c('Chow', 'HF'))
boxplot(Bodyweight ~ Diet, data = pheno, add = T,
names = c("",""), col="#0000ff22")
legend('topright', legend = levels(pheno$Sex), title = 'Sex',
pch = 16, col = 1:2)
######################################################
# random variables
########################################################
dat <- read.csv("femaleMiceWeights.csv")
head(dat)
# sample of 12 mice under chow diet and 12 mice under HF diet
control <- filter(dat,Diet=="chow") %>% select(Bodyweight) %>% unlist
treatment <- filter(dat,Diet=="hf") %>% select(Bodyweight) %>% unlist
par(mfrow=c(1,2))
hist(control)
hist(treatment)
print( mean(treatment) )
print( mean(control) )
#whole population
population <- read.csv("femaleControlsPopulation.csv")
##use unlist to turn it into a numeric vector
population <- unlist(population)
mean(population)
summary(chow.data[,3])
summary(chow.data[which(chow.data$Sex=="F"),3])
#lets sample 12 mice from the control population repeatedly
control <- sample(population,12)
mean(control)
control <- sample(population,12)
mean(control)
control <- sample(population,12)
mean(control)
ctr.mean=numeric()
for (i in 1:1000){
ctr.mean[i]=mean(sample(population,12))
}
par(mfrow=c(1,2))
myhist=hist(ctr.mean,xlim=c(16,30))
mydensity <- density(ctr.mean)
multiplier <- myhist$counts / myhist$density
mydensity$y <- mydensity$y * multiplier[1]
summary(ctr.mean)
lines(mydensity,col="red")
# what would happen if we take samples of 5 elements
ctr.mean1=numeric()
for (i in 1:1000){
ctr.mean1[i]=mean(sample(population,5))
}
mean(ctr.mean1)
myhist=hist(ctr.mean1,xlim=c(16,30))
mydensity <- density(ctr.mean1)
multiplier <- myhist$counts / myhist$density
mydensity$y <- mydensity$y * multiplier[1]
lines(mydensity,col="red")
boxplot(data.frame(N5=ctr.mean1,N12=ctr.mean),notch=T)
######################################################
# null distribution
########################################################
dat <- read.csv("femaleMiceWeights.csv")
control <- filter(dat,Diet=="chow") %>% select(Bodyweight) %>% unlist
treatment <- filter(dat,Diet=="hf") %>% select(Bodyweight) %>% unlist
print(mean(treatment))
print(mean(control))
obs <- mean(treatment) - mean(control)
#population is the set of 225 female control mice
diff.null=numeric()
ns=10000
for (i in 1:ns){
control=sample(population,12)
treatment=sample(population,12)
diff.null[i]=mean(treatment)-mean(control)
}
max(diff.null)
min(diff.null)
mean(diff.null)
median(diff.null)
sqrt(var(diff.null))
myhist=hist(diff.null)
mydensity <- density(diff.null)
multiplier <- myhist$counts / myhist$density
mydensity$y <- mydensity$y * multiplier[1]
lines(mydensity,col="red")
qqplot(diff.null,rnorm(ns,mean(diff.null),sqrt(var(diff.null))))
abline(a=0,b=1,col="red")
#Probability of getting a value larger than three under the null
length(which(diff.null>=3))
length(which(diff.null>=3))/ns
######################################################
# t-test
########################################################
#imagine pheno contains all the population of mice under HF and chow diets
dat <- read.csv("femaleMiceWeights.csv")
# sample of 12 mice under chow diet and 12 mice under HF diet
control <- filter(dat,Diet=="chow") %>% select(Bodyweight) %>% unlist
treatment <- filter(dat,Diet=="hf") %>% select(Bodyweight) %>% unlist
obs=mean(treatment)-mean(control)
sigma2.x=var(treatment,na.rm=T)
sigma2.y=var(control,na.rm=T)
se=sqrt(sigma2.x/length(treatment)+sigma2.y/length(control))
tstat=obs/se
1-pnorm(tstat)
t.test(treatment,control)
pop.control <- filter(pheno,Diet=="chow") %>% select(Bodyweight) %>% unlist
pop.treatment <- filter(pheno,Diet=="hf") %>% select(Bodyweight) %>% unlist
pn=tn=numeric()
for (i in 1:100){
treatment=sample(pop.treatment,100)
control=sample(pop.control,100)
obs=mean(treatment,na.rm=T)-mean(control,na.rm=T)
se=sqrt(var(treatment,na.rm=T)/length(treatment)+var(control,na.rm=T)/length(control))
pn[i]=1-pnorm(obs/se)
tn[i]=t.test(treatment,control)[[3]]
}
plot(pn,tn)
abline(0,1,col="red")
##########################################
# CI
##########################################
dat <- read.csv("mice_pheno.csv")
chowPopulation <- dat[dat$Sex=="F" & dat$Diet=="chow",3]
mu_chow <- mean(chowPopulation)
print(mu_chow)
N <- 30
chow <- sample(chowPopulation,N)
print(mean(chow))
se <- sd(chow)/sqrt(N)
print(se)
pnorm(2) - pnorm(-2)
Q <- qnorm(1- 0.05/2)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se )
interval
interval[1] < mu_chow & interval[2] > mu_chow
Q
B <- 250
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for (i in 1:B) {
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <-
mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
# Small sample size
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
Q <- qnorm(1- 0.05/2)
N <- 5
for (i in 1:B) {
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
#for such small N the sample mean is not normal but a students t---> use qt
plot(mean(chowPopulation) + c(-7,7), c(1,1), type="n",
xlab="weight", ylab="interval", ylim=c(1,B))
abline(v=mean(chowPopulation))
##Q <- qnorm(1- 0.05/2) ##no longer normal so use:
Q <- qt(1- 0.05/2, df=4)
N <- 5
for (i in 1:B) {
chow <- sample(chowPopulation, N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se )
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
qt(1- 0.05/2, df=4)
